/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stock_project3_without_lorry;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TSA10
 */
public class main_stock extends javax.swing.JFrame {

    /**
     * Creates new form main_stock
     */
    
    public main_stock() {
       this.setResizable(false);
        initComponents();
        show_User() ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_show = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        iname = new javax.swing.JTextField();
        quantity = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bprice = new javax.swing.JTextField();
        sprice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        table_show.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM", "QUANTITY", "BUYING PRICE", "SELLING PRICE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_show);

        jLabel1.setText("ITEM NAME");

        jLabel2.setText("QUANTITY");

        jLabel3.setText("BUYING PRICE");

        jLabel4.setText("SELLING PRICE");

        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        jLabel5.setText("SEARCH");

        jLabel6.setFont(new java.awt.Font("Tekton Pro", 1, 24)); // NOI18N
        jLabel6.setText("STOCK DETAILS");

        jButton1.setText("MAIN MANU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(242, 242, 242)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(iname, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bprice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sprice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(iname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(bprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(update)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(sprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
      public ArrayList<User> userList() 
    {
        ArrayList<User>userList=new ArrayList<>();
        
          Connection con=null;
           String currentDir=System.getProperty("user.dir");
       
         try
        {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            con=DriverManager.getConnection("jdbc:derby:"+currentDir+"\\Main_stock","root","root");
            String query="select * from STOCK";
            Statement st=con.createStatement();
            ResultSet rs=st.executeQuery(query);
            User user;
            while(rs.next())
            {
               user=new User( rs.getString("ITEM"), rs.getInt("QUANTITY"), rs.getDouble("BUYING_PRICE"),rs.getDouble("SELLING_PRICE"));
               userList.add(user);
            }
            
            
        }
         catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);
        }
         return userList;
        
    }
    public void show_User() 
    {
    ArrayList<User> list=userList();
    DefaultTableModel model=(DefaultTableModel)table_show.getModel();
     Object[] row=new Object[4];
      for(int i=0;i<list.size();i++)
     {
        
     }
     
     for(int i=0;i<list.size();i++)
     {
          if(list.get(i).getQuantity()==0)
         {
         Connection con=null;
        PreparedStatement prepd=null;
         String currentDir=System.getProperty("user.dir");
         try
        {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            con=DriverManager.getConnection("jdbc:derby:"+currentDir+"\\MAIN_STOCK","root","root");
           String val1=list.get(i).getItem();;
           
          // String val2=table_show.getModel().getValueAt(selectedRow,1).toString();
           String quary="DELETE FROM STOCK where ITEM=?";
          
            prepd=con.prepareStatement(quary);
             prepd.setString(1,val1);
            prepd.executeUpdate();

           }
           catch(SQLException ex){
               JOptionPane.showMessageDialog(null,ex);
            } catch (ClassNotFoundException ex) { 
            Logger.getLogger(main_stock.class.getName()).log(Level.SEVERE, null, ex);
        } 
         
     
         
         }
          else{
         
         row[0]=list.get(i).getItem();
         row[1]=list.get(i).getQuantity();
         row[2]=list.get(i).getBuy_price();
         row[3]=list.get(i).getSell_price();
      
        
         model.addRow(row);
          }
     }
     
    }
     public void show_User2() 
    {
    ArrayList<User> list=userList();
    DefaultTableModel model=(DefaultTableModel)table_show.getModel();
     Object[] row=new Object[4];
     int ss=list.size()-1;
     
           row[0]=list.get(ss).getItem();
         row[1]=list.get(ss).getQuantity();
         row[2]=list.get(ss).getBuy_price();
         row[3]=list.get(ss).getSell_price();
         model.addRow(row);
     
    }
    
    
    
    
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
       
        String item=iname.getText();
        String quen=quantity.getText();
        String buprice=bprice.getText();
        String seprice=sprice.getText();
         
        double buyprice=Double.parseDouble(buprice);
        double sellprice=Double.parseDouble(seprice);
        int quantityes=Integer.parseInt(quen);
          Connection con=null;
        PreparedStatement prepd=null;
        
        String currentDir=System.getProperty("user.dir");
         try
        {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            con=DriverManager.getConnection("jdbc:derby:"+currentDir+"\\Main_stock","root","root");
            // con=DriverManager.getConnection("jdbc:derby://localhost:1527/Main_stock","root","root");
            prepd=(PreparedStatement) con.prepareStatement("insert into STOCK(ITEM,QUANTITY,BUYING_PRICE,SELLING_PRICE) values(?,?,?,?)");
            prepd.setString(1,item);
            prepd.setInt(2,quantityes);
            prepd.setDouble(3,buyprice);
            prepd.setDouble(4,sellprice);
           
            int i=prepd.executeUpdate();
            if(i>=1)
            {
                  iname.setText("");
                  quantity.setText("");
                   bprice.setText("");
                    sprice.setText("");
                System.out.println("Success");
            }
            else
            {
                System.out.println("Some errors");
            }

        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null,ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main_stock.class.getName()).log(Level.SEVERE, null, ex);
        }
         show_User2();
        
    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        Connection con=null;
        PreparedStatement prepd=null;
         String currentDir=System.getProperty("user.dir");
         try
        {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            con=DriverManager.getConnection("jdbc:derby:"+currentDir+"\\MAIN_STOCK","root","root");
             int selectedRow=table_show.getSelectedRow();
         
           String val1=(table_show.getModel().getValueAt(selectedRow,0).toString());
           
          // String val2=table_show.getModel().getValueAt(selectedRow,1).toString();
           String quary="DELETE FROM STOCK where ITEM=?";
          
            prepd=con.prepareStatement(quary);
             prepd.setString(1,val1);
            prepd.executeUpdate();
            DefaultTableModel model=(DefaultTableModel) table_show.getModel();
            model.setRowCount(0);
            show_User();
           }
           catch(SQLException ex){
               JOptionPane.showMessageDialog(null,ex);
            } catch (ClassNotFoundException ex) { 
            Logger.getLogger(main_stock.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_deleteActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        Connection con=null;
        PreparedStatement prepd=null;
         String currentDir=System.getProperty("user.dir");
         ResultSet rs;
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
             con=DriverManager.getConnection("jdbc:derby:"+currentDir+"\\Main_stock","root","root");
            String query="select * from STOCK where ITEM=?";
           prepd=con.prepareStatement(query);
           prepd.setString(1,search.getText());
             rs=prepd.executeQuery();
           
            while(rs.next())
            {
               String itname=rs.getString("ITEM");
               iname.setText(itname);
               int qua=rs.getInt("QUANTITY");
               String quan=String.valueOf(qua);
               quantity.setText(quan);
                double buprice=rs.getDouble("BUYING_PRICE");
                String buyprice=String.valueOf(buprice);
                bprice.setText(buyprice);
                 double seprice=rs.getDouble("SELLING_PRICE");
                 String sellprice=String.valueOf(seprice);
                 sprice.setText(sellprice);
            }
        } 
        
        
        catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(main_stock.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }//GEN-LAST:event_searchKeyReleased

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
         String item=iname.getText();
        String quen=quantity.getText();
        String buprice=bprice.getText();
        String seprice=sprice.getText();
         
        double buyprice=Double.parseDouble(buprice);
        double sellprice=Double.parseDouble(seprice);
          Connection con=null;
        PreparedStatement prepd=null;
        
        String currentDir=System.getProperty("user.dir");
         try
        {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            con=DriverManager.getConnection("jdbc:derby:"+currentDir+"\\Main_stock","root","root");
           prepd=(PreparedStatement) con.prepareStatement("update STOCK set QUANTITY=?,BUYING_PRICE=?,SELLING_PRICE=? where ITEM=?");
          
            prepd.setString(1,quen);
            prepd.setDouble(2,buyprice);
            prepd.setDouble(3,sellprice);
            prepd.setString(4,item);
            int i=prepd.executeUpdate();
            if(i>=1)
            {
                  iname.setText("");
                  quantity.setText("");
                   bprice.setText("");
                    sprice.setText("");
                System.out.println("Success");
            }
            else
            {
                System.out.println("Some errors");
            }

        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null,ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main_stock.class.getName()).log(Level.SEVERE, null, ex);
        }
        table_show.setModel(new DefaultTableModel(null,new String[]{"ITEM","QUANTITY","BUYING_PRICE","SELLING_PRICE"}));
        show_User();
    }//GEN-LAST:event_updateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
           close();
        main_panal x=new main_panal();
            x.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    public void close()
    {
        WindowEvent winCloseEvent=new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winCloseEvent);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_stock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField bprice;
    private javax.swing.JButton delete;
    private javax.swing.JTextField iname;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField quantity;
    private javax.swing.JTextField search;
    private javax.swing.JTextField sprice;
    private javax.swing.JTable table_show;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
